generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id       String              @id @default(uuid())
  name     String              @unique
  products ProductCategories[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Product {
  id          String              @id @default(uuid())
  name        String
  price       Float
  description String
  image       String
  categories  ProductCategories[]
  variants    Variant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model ProductCategories {
  product_id    String
  category_name String
  category      Category @relation(fields: [category_name], references: [name])
  product       Product  @relation(fields: [product_id], references: [id])

  @@id([product_id, category_name])
  @@map("product_categories")
}

model Sale {
  id              String        @id @default(uuid())
  payment_method  String
  total           Float
  createdAt       DateTime      @default(now())
  user_id         String
  delivery_method String
  user            User          @relation(fields: [user_id], references: [email])
  sale_products   SaleProduct[]

  @@map("sales")
}

model SaleProduct {
  id       String @id @default(uuid())
  quantity Int
  sale_id  String
  size_id  String
  sale     Sale   @relation(fields: [sale_id], references: [id])
  size     Size   @relation(fields: [size_id], references: [id])

  @@unique([sale_id, size_id])
  @@map("sale_products")
}

model Size {
  id            String        @id @default(uuid())
  name          String
  stock         Int
  variant_id    String
  order         Int?
  sale_products SaleProduct[]
  variant       Variant       @relation(fields: [variant_id], references: [id])

  @@map("sizes")
}

model Variant {
  id         String  @id @default(uuid())
  color      String
  image      String
  product_id String
  sizes      Size[]
  product    Product @relation(fields: [product_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("variants")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  sales          Sale[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
